import { app, BrowserWindow } from "electron";
import { spawn } from "child_process";
import path from "path";
import { IS_DEV, MODS_PATH, RESOURCES_PATH } from "./constants";
// import { createSpeedometer } from "./windows/speedometer";
import { createModsFolder } from "./utils/modsFolder";
import { createOverlayWindow } from "./utils/createOverlayWindow";
import { iRacingMessage } from "../shared/types/iRacingMessage";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const windows: BrowserWindow[] = [];

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

createModsFolder();

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
    },
  });

  // Start the iRacing IPC process
  const exePath = path.join(RESOURCES_PATH, "irsdk-ipc.exe");
  const irsdkIPC = spawn(exePath, {
    stdio: ["pipe", "pipe", "pipe", "ipc"], // Ensure IPC is enabled
  });

  irsdkIPC.on("message", (message) => {
    const typedMessage = message as iRacingMessage;

    mainWindow.webContents.send("iracing-reply", typedMessage);
  });

  irsdkIPC.on("spawn", () => {
    setInterval(() => {
      irsdkIPC.send("connected");
    }, 1000);
  });

  irsdkIPC.on("close", (code) => {
    console.log(`Child process exited with code ${code}`);
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (IS_DEV) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }

  mainWindow.on("close", () => {
    windows.forEach((win) => {
      win.removeAllListeners("close"); // Remove the close prevention listener
      win.close(); // Close the overlay window
    });
    app.quit();
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();
  windows.push(
    createOverlayWindow(path.join(MODS_PATH, "test", "index.html"), {
      width: 1920 / 4,
      height: 1080 / 4,
    })
  );
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
